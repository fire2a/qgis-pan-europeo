#!python3
# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MarraquetaDialog
                                 A QGIS plugin
 Ponders different rasters with different utility functions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by fdobad@github
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 from qgis.PyQt.QtCore import pyqtRemoveInputHook
 pyqtRemoveInputHook()
 import pdb
 pdb.set_trace()
 from IPython.terminal.embed import InteractiveShellEmbed
 InteractiveShellEmbed()()
"""

import os
from functools import partial

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import Qt, QUrl
from qgis.PyQt.QtGui import QDesktopServices

from ..models.pan_rasters import PanRasters
from ..views.param_widget import ParamWidget
from ..views.param_widget_list import ParamWidgetList

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), "pan_batido_dialog_base.ui"))


class MarraquetaDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MarraquetaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        self.setupUi(self)

        # Set up columns for treeWidget
        self.treeWidget.setColumnCount(4)
        self.treeWidget.setHeaderLabels(["Raster Name", "Weight", "Utility Function", "Parameters"])

        # Connect the buttonBox
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(self.accept)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Close).clicked.connect(self.reject)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Help).clicked.connect(self.open_help)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.cancel_task)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Reset).clicked.connect(self.reset)

        # Initialize the model
        self.model = PanRasters()

        # Populate the UI with rasters and utility functions
        self.populate_rasters()

    def populate_rasters(self):
        """Populate the UI with the list of rasters and utility functions."""
        # Clear existing items in the treeWidget
        self.treeWidget.clear()

        utility_functions = self.model.get_utility_functions()

        # Populate treeWidget
        for raster_name, raster in self.model.get_rasters().items():
            # Create a new tree widget item for each raster
            tree_item = QtWidgets.QTreeWidgetItem(self.treeWidget)
            tree_item.setText(0, raster_name)
            tree_item.setCheckState(0, Qt.Checked if self.model.get_visibility(raster_name) else Qt.Unchecked)
            # tree_item.setData(0, Qt.UserRole, raster_name)  # Store the raster name in the item

            # Create a combo box for utility functions
            utility_combo = QtWidgets.QComboBox()
            for func in utility_functions:
                utility_combo.addItem(func["description"], func["name"])

            # Check if it has a utility function selected and update the combo box
            if current_func_name := self.model.get_current_utility_function_name(raster_name):
                index = utility_combo.findData(current_func_name)
                if index != -1:
                    utility_combo.setCurrentIndex(index)

            # Connect the signal after setting the current index
            utility_combo.currentIndexChanged.connect(
                partial(self.on_utility_function_changed, tree_item=tree_item, combo=utility_combo)
            )

            # Add the combo box to the tree widget item
            self.treeWidget.setItemWidget(tree_item, 2, utility_combo)

            # Add ParamWidget for weight
            weight_widget = ParamWidget(value=self.model.get_weight(raster_name))
            weight_widget.valueChanged.connect(
                lambda value, raster_name=raster_name: self.update_weight(raster_name, value)
            )
            self.treeWidget.setItemWidget(tree_item, 1, weight_widget)

            # Trigger the utility function change to add the correct number of ParamWidgets
            self.on_utility_function_changed(utility_combo.currentIndex(), utility_combo, tree_item)

    def on_utility_function_changed(self, index, combo, tree_item):
        """Handle utility function selection change."""
        selected_function = combo.itemData(index)
        if selected_function is None:
            raise ValueError("Selected function is None")

        # Clear existing parameter widgets
        if self.treeWidget.itemWidget(tree_item, 3):
            self.treeWidget.removeItemWidget(tree_item, 3)

        # Retrieve the raster name from the tree_text
        # raster_name = tree_item.data(0, Qt.UserRole)
        raster_name = tree_item.text(0)

        # Restore previous values from the model
        params = self.model.get_raster_params(raster_name, selected_function)

        # Add new ParamWidgetList
        param_widget_list = ParamWidgetList(params)
        self.treeWidget.setItemWidget(tree_item, 3, param_widget_list)

        # Connect signals to update the model
        for param_name, param_widget in zip(params.keys(), param_widget_list.param_widgets):
            param_widget.valueChanged.connect(
                partial(
                    self.update_param_value,
                    raster_name=raster_name,
                    func=selected_function,
                    param_name=param_name,
                )
            )

        # Update the current utility function in the model
        self.model.set_current_utility_function_name(raster_name, selected_function)

    def update_weight(self, raster_name, value):
        """Update the weight of a raster in the model."""
        self.model.set_weight(raster_name, value)

    def update_param_value(self, value, raster_name, func, param_name):
        """Update a parameter of a raster and utility function in the model."""
        print(f"update_param_value: {param_name=} {value=} {func=} {raster_name=}")
        params = self.model.get_raster_params(raster_name, func)
        params[param_name]["value"] = value
        self.model.set_raster_params(raster_name, func, params)

    def open_help(self):
        """Open the help documentation."""
        QDesktopServices.openUrl(QUrl("https://www.github.com/fire2a"))

    def cancel_task(self):
        """Handle the cancel button to stop a long-running task."""
        print("Cancel button pressed. Stopping the task...")
        # Add logic to stop the long-running task here

    def reset(self):
        """Reset the model to its initial state."""
        self.model.clear_rasters()
        self.populate_rasters()
