# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AbstractClsDialog
                                 A QGIS plugin
 UsingQT abstract tiem
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-02-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by fdo
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import QSize, Qt

# from ..model import Model
from .double_spin_slider import DoubleSpinSlider

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), "dialog.ui"))


class Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None, iface=None, model=None):
        """Constructor."""
        super().__init__(parent)

        self.setupUi(self)

        self.iface = iface
        self.model = model

        self.tree.setItemsExpandable(True)
        self.tree.setModel(self.model)
        self.tree.setEditTriggers(QtWidgets.QAbstractItemView.AllEditTriggers)
        self.tree.setItemDelegateForColumn(2, WeightDoubleSpinSliderDelegate(self))
        # self.tree.setItemDelegateForColumn(3, DoubleSpinSliderDelegate(self))

        # self.button_box.button(QtWidgets.QDialogButtonBox.Apply).clicked.connect(self.complete)
        # self.button_box.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(self.delete)
        # self.button_box.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(self.add)


class WeightDoubleSpinSliderDelegate(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        value = index.model().data(index, Qt.EditRole)
        editor = DoubleSpinSlider(parent=parent)
        editor.set3(0, value, 100)
        editor.valueChanged.connect(lambda value, idx=index: self.on_value_changed(value, idx))
        return editor

    def setEditorData(self, editor, index):
        editor.setValue(index.model().data(index, Qt.EditRole))

    def setModelData(self, editor, model, index):
        model.setData(index, editor.value(), Qt.EditRole)

    def on_value_changed(self, value, index):
        model = index.model()
        model.setData(index, value, Qt.EditRole)

    def updateEditorGeometry(self, editor, option, index):
        editor.setGeometry(option.rect)

    def paint(self, painter, option, index):
        if value := index.model().data(index, Qt.EditRole):
            # widget = QtWidgets.QWidget()
            # layout = QtWidgets.QBoxLayout(widget)
            slider = DoubleSpinSlider(parent=self.parent().tree)
            slider.set3(0, value, 100)
            slider.setGeometry(option.rect)
            # layout.addWidget(slider)
            tree = self.parent().tree
            tree_top_left = tree.viewport().mapTo(tree, option.rect.topLeft())
            window_top_left = tree.mapTo(tree.window(), tree_top_left)
            slider.render(painter, window_top_left)
            del slider
            # widget.render(painter, window_top_left)
            # pt = painter.deviceTransform().map(option.rect.topLeft())
            print(
                f"weight:paint: {index.row()} t w r p",
                tree_top_left,
                window_top_left,
                option.rect.topLeft(),
                #     pt,
                sep="\n",
            )
        else:
            super().paint(painter, option, index)

    def sizeHint(self, option, index):
        return QSize(200, 40)


"""

class SliderDelegate(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        slider = QtWidgets.QSlider(Qt.Horizontal, parent)
        slider.setMinimum(0)
        slider.setMaximum(100)
        slider.sliderReleased.connect(lambda idx=index: self.on_slider_released(idx))
        return slider

    def setEditorData(self, editor, index):
        value = index.model().data(index, Model.SliderRole)
        print(f"SliderDelegate:setEditorData: {value=}")
        min_, val, max_ = value
        editor.setMinimum(min_)
        editor.setMaximum(max_)
        editor.setValue(val)

    def setModelData(self, editor, model, index):
        model.setData(index, (editor.minimum(), editor.value(), editor.maximum()), Model.SliderRole)

    def on_slider_released(self, index):
        slider = self.sender()
        value = slider.value()
        min_ = slider.minimum()
        max_ = slider.maximum()
        model = index.model()
        model.setData(index, (min_, value, max_), Model.SliderRole)

    def paint(self, painter, option, index):
        value = index.model().data(index, Model.SliderRole)
        min_, val, max_ = value

        # Create a QStyleOptionSlider and initialize it
        opt = QtWidgets.QStyleOptionSlider()
        opt.rect = option.rect
        opt.minimum = min_
        opt.maximum = max_
        opt.sliderPosition = val
        opt.sliderValue = val
        opt.orientation = Qt.Horizontal
        opt.state = option.state | QtWidgets.QStyle.State_Enabled
        opt.subControls = QtWidgets.QStyle.SC_SliderGroove | QtWidgets.QStyle.SC_SliderHandle

        # Use the existing QPainter to draw the slider
        style = option.widget.style() if option.widget else QtWidgets.QApplication.style()
        style.drawComplexControl(QtWidgets.QStyle.CC_Slider, opt, painter, option.widget)


class DoubleSpinSliderDelegate(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        value = index.model().data(index, Model.DoubleSpinSliderRole)
        min_, val, max_ = value
        widget = DoubleSpinSlider(parent=parent, min=min_, value=val, max=max_)
        widget.sliderReleased.connect(lambda idx=index: self.on_slider_released(idx))
        return widget

    def setEditorData(self, editor, index):
        value = index.model().data(index, Model.DoubleSpinSliderRole)
        print(f"DoubleSpinSliderDelegate:setEditorData: {value=}")
        editor.set3(*value)

    def setModelData(self, editor, model, index):
        model.setData(index, editor.get3(), Model.DoubleSpinSliderRole)

    def on_slider_released(self, index):
        slider = self.sender()
        model = index.model()
        model.setData(index, slider.get3(), Model.DoubleSpinSliderRole)

    def nope0(self):
        # fmt: off
        from qgis.PyQt.QtCore import pyqtRemoveInputHook
        pyqtRemoveInputHook()
        from IPython.terminal.embed import InteractiveShellEmbed
        InteractiveShellEmbed()()
        # fmt: on

    def nope4(self, painter, option, index):

        value = index.model().data(index, Model.DoubleSpinSliderRole)
        print(f"DoubleSpinSliderDelegate:paint: {value=}")
        min_, val, max_ = value

        # Create a QStyleOptionViewItem and initialize it
        options = QtWidgets.QStyleOptionViewItem(option)
        self.initStyleOption(options, index)

        if options.widget:  # <PyQt5.QtWidgets.QTreeView at 0x7fe7a3e248b0>
            style = options.widget.style()
        else:
            style = QtWidgets.QApplication.style()

        style.drawControl(QtWidgets.QStyle.CE_ItemViewItem, options, painter)

    def nope2(self):
        # Create and configure the DoubleSpinSlider
        double_spin_slider = DoubleSpinSlider()
        double_spin_slider.set3(min_, val, max_)
        double_spin_slider.setGeometry(option.rect)

        # Render the DoubleSpinSlider
        painter.save()
        painter.translate(option.rect.topLeft())
        painter.setClipRect(option.rect.translated(-option.rect.topLeft()))
        double_spin_slider.render(painter)
        painter.restore()

    def nope1(self):

        opt = QtWidgets.QStyleOptionSpinBox

        opt = QtWidgets.QStyleOptionSpinBox
        opt.rect = option.rect
        opt.minimum = min_
        opt.maximum = max_

        # Create a QStyleOptionSlider and initialize it
        opt = QtWidgets.QStyleOptionSlider()
        opt.rect = option.rect
        opt.minimum = min_
        opt.maximum = max_
        opt.sliderPosition = val
        opt.sliderValue = val
        opt.orientation = Qt.Horizontal
        opt.state = option.state | QtWidgets.QStyle.State_Enabled
        opt.subControls = QtWidgets.QStyle.SC_SliderGroove | QtWidgets.QStyle.SC_SliderHandle

        # Use the existing QPainter to draw the slider
        style = option.widget.style() if option.widget else QtWidgets.QApplication.style()
        style.drawComplexControl(QtWidgets.QStyle.CC_Slider, opt, painter, option.widget)

        style.drawComplexControl(QtWidgets.QStyle.CC_Slider, option, painter, options.widget)

    def paint(self, painter, option, index):

        value = index.model().data(index, Model.DoubleSpinSliderRole)
        print(f"DoubleSpinSliderDelegate:paint: {value=}")
        min_, val, max_ = value

        double_spin_slider = DoubleSpinSlider()
        double_spin_slider.set3(min_, val, max_)
        double_spin_slider.setGeometry(option.rect)
        double_spin_slider.render(painter, option.rect.topLeft())

    def nope5(self):
        # Create a QWidget to contain both QDoubleSpinBox and QSlider
        container = QtWidgets.QWidget()
        layout = QtWidgets.QHBoxLayout(container)
        layout.setContentsMargins(0, 0, 0, 0)

        # Create and configure the QDoubleSpinBox
        spin_box = QtWidgets.QDoubleSpinBox()
        spin_box.setRange(min_, max_)
        spin_box.setValue(val)
        layout.addWidget(spin_box)

        # Create and configure the QSlider
        slider = DoubleSlider(orientation=Qt.Horizontal)
        slider.setMinimum(min_)
        slider.setMaximum(max_)
        slider.setValue(val)
        layout.addWidget(slider)

        # Render the container widget
        container.setGeometry(option.rect)
        container.render(painter, option.rect.topLeft())

    def nope4(self):
        pass
        #     # Create a QWidget to contain both QDoubleSpinBox and QSlider
        #     container = QtWidgets.QWidget()
        #     layout = QtWidgets.QHBoxLayout(container)
        #     layout.setContentsMargins(0, 0, 0, 0)

        #     # Create and configure the QDoubleSpinBox
        #     spin_box = QtWidgets.QDoubleSpinBox()
        #     spin_box.setRange(min_, max_)
        #     spin_box.setValue(val)
        #     layout.addWidget(spin_box)

        #     # Create and configure the QSlider
        #     slider = DoubleSlider(orientation=Qt.Horizontal)
        #     slider.setMinimum(min_)
        #     slider.setMaximum(max_)
        #     slider.setValue(val)
        #     layout.addWidget(slider)

        #     # Render the container widget
        #     container.setGeometry(option.rect)
        #     container.render(painter, option.rect.topLeft())

class SliderDelegate(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        slider = QtWidgets.QSlider(Qt.Horizontal, parent)
        slider.setMinimum(0)
        slider.setMaximum(100)
        slider.sliderReleased.connect(lambda idx=index: self.on_slider_released(idx))
        return slider

    def setEditorData(self, editor, index):
        value = index.model().data(index, Model.SliderRole)
        print(f"SliderDelegate:setEditorData: {value=}")
        min_, val, max_ = value
        editor.setMinimum(min_)
        editor.setMaximum(max_)
        editor.setValue(val)

    def setModelData(self, editor, model, index):
        model.setData(index, (editor.minimum(), editor.value(), editor.maximum()), Model.SliderRole)

    def on_slider_released(self, index):
        slider = self.sender()
        value = slider.value()
        min_ = slider.minimum()
        max_ = slider.maximum()
        model = index.model()
        model.setData(index, (min_, value, max_), Model.SliderRole)

    def paint(self, painter, option, index):
        value = index.model().data(index, Model.SliderRole)
        min_, val, max_ = value

        # Create a QStyleOptionSlider and initialize it
        opt = QtWidgets.QStyleOptionSlider()
        opt.rect = option.rect
        opt.minimum = min_
        opt.maximum = max_
        opt.sliderPosition = val
        opt.sliderValue = val
        opt.orientation = Qt.Horizontal
        opt.state = option.state | QtWidgets.QStyle.State_Enabled
        opt.subControls = QtWidgets.QStyle.SC_SliderGroove | QtWidgets.QStyle.SC_SliderHandle

        # Use the existing QPainter to draw the slider
        style = option.widget.style() if option.widget else QtWidgets.QApplication.style()
        style.drawComplexControl(QtWidgets.QStyle.CC_Slider, opt, painter, option.widget)


class DoubleSpinSliderDelegate(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        value = index.model().data(index, Model.DoubleSpinSliderRole)
        min_, val, max_ = value
        widget = DoubleSpinSlider(parent=parent, min=min_, value=val, max=max_)
        widget.sliderReleased.connect(lambda idx=index: self.on_slider_released(idx))
        return widget

    def setEditorData(self, editor, index):
        value = index.model().data(index, Model.DoubleSpinSliderRole)
        print(f"DoubleSpinSliderDelegate:setEditorData: {value=}")
        editor.set3(*value)

    def setModelData(self, editor, model, index):
        model.setData(index, editor.get3(), Model.DoubleSpinSliderRole)

    def on_slider_released(self, index):
        slider = self.sender()
        model = index.model()
        model.setData(index, slider.get3(), Model.DoubleSpinSliderRole)

    def nope0(self):
        # fmt: off
        from qgis.PyQt.QtCore import pyqtRemoveInputHook
        pyqtRemoveInputHook()
        from IPython.terminal.embed import InteractiveShellEmbed
        InteractiveShellEmbed()()
        # fmt: on

    def nope4(self, painter, option, index):

        value = index.model().data(index, Model.DoubleSpinSliderRole)
        print(f"DoubleSpinSliderDelegate:paint: {value=}")
        min_, val, max_ = value

        # Create a QStyleOptionViewItem and initialize it
        options = QtWidgets.QStyleOptionViewItem(option)
        self.initStyleOption(options, index)

        if options.widget:  # <PyQt5.QtWidgets.QTreeView at 0x7fe7a3e248b0>
            style = options.widget.style()
        else:
            style = QtWidgets.QApplication.style()

        style.drawControl(QtWidgets.QStyle.CE_ItemViewItem, options, painter)

    def nope2(self):
        # Create and configure the DoubleSpinSlider
        double_spin_slider = DoubleSpinSlider()
        double_spin_slider.set3(min_, val, max_)
        double_spin_slider.setGeometry(option.rect)

        # Render the DoubleSpinSlider
        painter.save()
        painter.translate(option.rect.topLeft())
        painter.setClipRect(option.rect.translated(-option.rect.topLeft()))
        double_spin_slider.render(painter)
        painter.restore()

    def nope1(self):

        opt = QtWidgets.QStyleOptionSpinBox

        opt = QtWidgets.QStyleOptionSpinBox
        opt.rect = option.rect
        opt.minimum = min_
        opt.maximum = max_

        # Create a QStyleOptionSlider and initialize it
        opt = QtWidgets.QStyleOptionSlider()
        opt.rect = option.rect
        opt.minimum = min_
        opt.maximum = max_
        opt.sliderPosition = val
        opt.sliderValue = val
        opt.orientation = Qt.Horizontal
        opt.state = option.state | QtWidgets.QStyle.State_Enabled
        opt.subControls = QtWidgets.QStyle.SC_SliderGroove | QtWidgets.QStyle.SC_SliderHandle

        # Use the existing QPainter to draw the slider
        style = option.widget.style() if option.widget else QtWidgets.QApplication.style()
        style.drawComplexControl(QtWidgets.QStyle.CC_Slider, opt, painter, option.widget)

        style.drawComplexControl(QtWidgets.QStyle.CC_Slider, option, painter, options.widget)

    def paint(self, painter, option, index):

        value = index.model().data(index, Model.DoubleSpinSliderRole)
        print(f"DoubleSpinSliderDelegate:paint: {value=}")
        min_, val, max_ = value

        double_spin_slider = DoubleSpinSlider()
        double_spin_slider.set3(min_, val, max_)
        double_spin_slider.setGeometry(option.rect)
        double_spin_slider.render(painter, option.rect.topLeft())

    def nope5(self):
        # Create a QWidget to contain both QDoubleSpinBox and QSlider
        container = QtWidgets.QWidget()
        layout = QtWidgets.QHBoxLayout(container)
        layout.setContentsMargins(0, 0, 0, 0)

        # Create and configure the QDoubleSpinBox
        spin_box = QtWidgets.QDoubleSpinBox()
        spin_box.setRange(min_, max_)
        spin_box.setValue(val)
        layout.addWidget(spin_box)

        # Create and configure the QSlider
        slider = DoubleSlider(orientation=Qt.Horizontal)
        slider.setMinimum(min_)
        slider.setMaximum(max_)
        slider.setValue(val)
        layout.addWidget(slider)

        # Render the container widget
        container.setGeometry(option.rect)
        container.render(painter, option.rect.topLeft())

    def nope4(self):
        pass
        #     # Create a QWidget to contain both QDoubleSpinBox and QSlider
        #     container = QtWidgets.QWidget()
        #     layout = QtWidgets.QHBoxLayout(container)
        #     layout.setContentsMargins(0, 0, 0, 0)

        #     # Create and configure the QDoubleSpinBox
        #     spin_box = QtWidgets.QDoubleSpinBox()
        #     spin_box.setRange(min_, max_)
        #     spin_box.setValue(val)
        #     layout.addWidget(spin_box)

        #     # Create and configure the QSlider
        #     slider = DoubleSlider(orientation=Qt.Horizontal)
        #     slider.setMinimum(min_)
        #     slider.setMaximum(max_)
        #     slider.setValue(val)
        #     layout.addWidget(slider)

        #     # Render the container widget
        #     container.setGeometry(option.rect)
        #     container.render(painter, option.rect.topLeft())
"""
